{"version":3,"sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Container/Container.styled.jsx","components/Container/Container.jsx","components/ContactForm/ContactForm.styled.jsx","redux/contacts/contactsActions.js","components/ContactForm/ContactForm.jsx","redux/contacts/contactsSelectors.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","App.jsx","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["Wrapper","Title","Section","title","children","StyledContainer","Container","StyledForm","InputContainer","Input","Label","Button","contactsActions","addContact","createAction","name","number","payload","id","nanoid","deleteContact","changeFilter","ContactForm","useState","setName","setNumber","dispatch","useDispatch","nameInputId","telInputId","handleChange","e","currentTarget","value","onSubmit","preventDefault","type","onChange","pattern","autoComplete","placeholder","maxLength","required","htmlFor","size","getFilter","state","contacts","filter","getContacts","items","getFilteredContacts","contact","toLowerCase","includes","List","Item","ContactList","useSelector","map","onClick","Filter","filterInputId","target","App","length","createReducer","includedName","find","includedNumber","replace","Swal","fire","position","icon","toUpperCase","confirmButtonColor","checkContact","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.97303faa.chunk.js","sourcesContent":["import styled from \"@emotion/styled/macro\";\n\nexport const Wrapper = styled.section`\n  padding: 40px 0;\n`;\nexport const Title = styled.h2`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 50px;\n  margin-left: auto;\n  margin-right: auto;\n\n  text-transform: uppercase;\n  font-size: 32px;\n  text-align: center;\n`;\n","import PropTypes from \"prop-types\";\nimport { Wrapper, Title } from \"./Section.styled\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <Wrapper>\n      {title && <Title>{title}</Title>}\n      {children}\n    </Wrapper>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import styled from \"@emotion/styled/macro\";\n\nexport const StyledContainer = styled.div`\n  width: 800px;\n  margin: 0 auto;\n  padding: 30px;\n  border-radius: 5px;\n  box-shadow: rgba(0, 0, 0, 0.5) 0 0 10px 5px;\n\n  background-color: var(--color-bg);\n\n  & h1,\n  h2 {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    color: var(--color-dark);\n\n    & svg {\n      margin-right: 10px;\n    }\n  }\n\n  & h1 {\n    font-size: 40px;\n    margin-bottom: 40px;\n  }\n\n  & h2 {\n    font-size: 28px;\n    margin-bottom: 60px;\n  }\n`;\n","import PropTypes from \"prop-types\";\nimport { StyledContainer } from \"./Container.styled\";\n\nconst Container = ({ children }) => {\n  return <StyledContainer>{children}</StyledContainer>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import styled from \"@emotion/styled/macro\";\n\nexport const StyledForm = styled.form`\n  width: 450px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 40px;\n`;\n\nexport const InputContainer = styled.div`\n  position: relative;\n  width: 100%;\n  margin-bottom: 40px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  width: 100%;\n  height: 40px;\n  padding-left: 30px;\n  border: none;\n  border-bottom: 1px solid tan;\n\n  font-size: 20px;\n  color: var(--color-accent);\n  background-color: transparent;\n\n  &::placeholder {\n    opacity: 0;\n\n    color: var(--color-accent);\n\n    transition: opacity 250ms ease;\n  }\n\n  &:focus {\n    outline: none;\n    border-color: var(--color-accent);\n\n    &::placeholder {\n      opacity: 0.7;\n      transition-delay: 250ms;\n    }\n  }\n\n  &:focus + label,\n  &:not(:placeholder-shown) + label {\n    transform: translate(-32px, -30px);\n    font-size: 14px;\n    text-transform: uppercase;\n    font-weight: 600;\n    color: var(--color-accent);\n\n    & svg {\n      color: var(--color-accent);\n      transform: translate(32px, 30px);\n    }\n  }\n`;\n\nexport const Label = styled.label`\n  position: absolute;\n  left: 0;\n  bottom: 5px;\n  display: flex;\n  align-items: center;\n  margin-bottom: 5px;\n  cursor: text;\n  font-size: 20px;\n\n  color: var(--color-light);\n\n  transition: color 250ms ease-in-out, transform 250ms ease-in-out;\n\n  & svg {\n    margin-right: 10px;\n    transition: color 250ms ease-in-out, transform 250ms ease-in-out;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 5px 10px;\n  cursor: pointer;\n  border: 2px solid tan;\n  border-radius: 4px;\n\n  font-size: 20px;\n  text-transform: uppercase;\n  color: var(--color-light);\n  background-color: transparent;\n\n  transition: all 250ms ease-in-out;\n\n  &:hover {\n    border-color: var(--color-accent);\n    color: var(--color-accent);\n  }\n\n  & svg {\n    margin-right: 10px;\n  }\n`;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"nanoid\";\n// import types from \"./contactsTypes\";\n\nconst contactsActions = {\n  addContact: createAction(\"contacts/add\", (name, number) => ({\n    payload: {\n      id: nanoid(),\n      name,\n      number,\n    },\n  })),\n  deleteContact: createAction(\"contacts/delete\"),\n  changeFilter: createAction(\"contacts/changeFilter\"),\n\n  // addContact: (name, number) => ({\n  //   type: types.ADD,\n  //   payload: { id: nanoid(), name, number },\n  // }),\n\n  // deleteContact: (contactId) => ({\n  //   type: types.DELETE,\n  //   payload: contactId,\n  // }),\n\n  // changeFilter: (value) => ({\n  //   type: types.CHANGE_FILTER,\n  //   payload: value,\n  // }),\n};\n\nexport default contactsActions;\n","// import PropTypes from \"prop-types\";\nimport { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport { /*connect,*/ useDispatch } from \"react-redux\";\nimport {\n  StyledForm,\n  InputContainer,\n  Input,\n  Label,\n  Button,\n} from \"./ContactForm.styled\";\nimport { FiUser, FiPhone, FiUserPlus } from \"react-icons/fi\";\nimport contactsActions from \"redux/contacts/contactsActions\";\n\nconst ContactForm = (/*{ onSubmit }*/) => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const dispatch = useDispatch();\n\n  const nameInputId = nanoid();\n  const telInputId = nanoid();\n\n  const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // onSubmit({ name, number });\n    dispatch(contactsActions.addContact(name, number));\n\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit}>\n      <InputContainer>\n        <Input\n          id={nameInputId}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          autoComplete=\"off\"\n          placeholder=\"Dmitry Karas\"\n          maxLength=\"40\"\n          required\n        />\n\n        <Label htmlFor={nameInputId}>\n          <FiUser size=\"22\" />\n          Name\n        </Label>\n      </InputContainer>\n\n      <InputContainer>\n        <Input\n          id={telInputId}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          autoComplete=\"off\"\n          placeholder=\"444-55-66\"\n          maxLength=\"17\"\n          required\n        />\n        <Label htmlFor={telInputId}>\n          <FiPhone size=\"22\" />\n          Number\n        </Label>\n      </InputContainer>\n\n      <Button type=\"submit\">\n        <FiUserPlus size=\"30\" />\n        add\n      </Button>\n    </StyledForm>\n  );\n};\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onSubmit: ({ name, number }) =>\n//     dispatch(contactsActions.addContact(name, number)),\n// });\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// export default connect(null, mapDispatchToProps)(ContactForm);\nexport default ContactForm;\n","export const getFilter = (state) => state.contacts.filter;\n\nexport const getContacts = (state) => state.contacts.items;\n\nexport const getFilteredContacts = (state) => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n\n  return contacts.filter(\n    (contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n      contact.number.includes(filter)\n  );\n};\n","import styled from \"@emotion/styled/macro\";\n\nexport const List = styled.ul`\n  border-radius: 4px;\n  overflow: hidden;\n`;\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  margin: 0 auto;\n  padding: 10px 5px;\n  border-bottom: 1px solid rosybrown;\n\n  & span {\n    display: inline-flex;\n    align-items: center;\n\n    font-weight: 600;\n    color: var(--color-dark);\n\n    &:first-of-type {\n      color: var(--color-accent);\n      margin-right: 10px;\n    }\n\n    & svg {\n      margin-right: 10px;\n      color: var(--color-accent);\n    }\n  }\n\n  & svg {\n    color: var(--color-title);\n  }\n`;\nexport const Button = styled.button`\n  display: block;\n  margin-left: auto;\n  padding: 10px;\n  border: none;\n  cursor: pointer;\n\n  background-color: transparent;\n  transition: all 250ms ease-in-out;\n\n  &:hover {\n    color: var(--color-accent);\n    transform: scale(1.3);\n  }\n`;\n","// import PropTypes from \"prop-types\";\nimport { BsTrash } from \"react-icons/bs\";\nimport { MdContactPhone } from \"react-icons/md\";\nimport { /*connect,*/ useSelector, useDispatch } from \"react-redux\";\nimport contactsActions from \"redux/contacts/contactsActions\";\nimport { getFilteredContacts } from \"redux/contacts/contactsSelectors\";\nimport { List, Item, Button } from \"./ContactList.styled\";\n\n// const filterContacts = (contacts, filter) =>\n//   contacts.filter(\n//     (contact) =>\n//       contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n//       contact.number.includes(filter)\n//   );\n\nconst ContactList = (/*{ contacts, onDeleteContact }*/) => {\n  const contacts = useSelector(getFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <Item key={id}>\n            <span>\n              <MdContactPhone size=\"20\" />\n              {name}:\n            </span>\n\n            <span>{number}</span>\n\n            <Button onClick={() => dispatch(contactsActions.deleteContact(id))}>\n              <BsTrash size=\"20\" />\n            </Button>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\n// ContactList.propTypes = {\n// contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)).isRequired,\n// onDeleteContact: PropTypes.func.isRequired,\n// };\n\n// Button.propTypes = {\n//   onClick: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   contacts: filterContacts(items, filter),\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onDeleteContact: (id) => dispatch(contactsActions.deleteContact(id)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\nexport default ContactList;\n","import styled from \"@emotion/styled/macro\";\n\nexport const InputContainer = styled.div`\n  position: relative;\n  width: 100%;\n  margin-bottom: 40px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  width: 100%;\n  height: 40px;\n  margin-bottom: 40px;\n  padding-left: 40px;\n  border: none;\n  border-bottom: 1px solid tan;\n\n  font-size: 20px;\n  color: var(--color-accent);\n  background-color: transparent;\n\n  transition: all 250ms ease-in-out;\n\n  &::placeholder {\n    opacity: 0;\n\n    color: var(--color-accent);\n\n    transition: opacity 250ms ease;\n  }\n\n  &:focus {\n    outline: none;\n    border-bottom: 1px solid var(--color-accent);\n\n    &::placeholder {\n      opacity: 0.7;\n      transition-delay: 250ms;\n    }\n  }\n\n  &:focus + label,\n  &:not(:placeholder-shown) + label {\n    transform: translate(-36px, -30px);\n    font-size: 14px;\n    text-transform: uppercase;\n    font-weight: 600;\n    color: var(--color-accent);\n\n    & svg {\n      color: var(--color-accent);\n      transform: translate(36px, 30px);\n    }\n  }\n`;\n\nexport const Label = styled.label`\n  position: absolute;\n  left: 0;\n  bottom: 5px;\n  display: flex;\n  align-items: center;\n  margin-bottom: 5px;\n  cursor: text;\n\n  font-size: 20px;\n  color: tan;\n\n  transition: color 250ms ease-in-out, transform 250ms ease-in-out;\n\n  & svg {\n    margin-right: 10px;\n    transition: color 250ms ease-in-out, transform 250ms ease-in-out;\n  }\n`;\n","// import PropTypes from \"prop-types\";\nimport { /*connect*/ useSelector, useDispatch } from \"react-redux\";\nimport contactsActions from \"redux/contacts/contactsActions\";\nimport { nanoid } from \"nanoid\";\nimport { AiOutlineFileSearch } from \"react-icons/ai\";\nimport { InputContainer, Input, Label } from \"./Filter.styled\";\nimport { getFilter } from \"redux/contacts/contactsSelectors\";\n\nconst Filter = (/*{ value, onChange }*/) => {\n  const filterInputId = nanoid();\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <InputContainer>\n        <Input\n          id={filterInputId}\n          type=\"text\"\n          value={value}\n          onChange={(e) =>\n            dispatch(contactsActions.changeFilter(e.target.value))\n          }\n          placeholder=\"Dmitry\"\n        />\n        <Label htmlFor={filterInputId}>\n          <AiOutlineFileSearch size=\"30\" />\n          Find contacts by name\n        </Label>\n      </InputContainer>\n    </>\n  );\n};\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = (state) => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onChange: (e) => dispatch(contactsActions.changeFilter(e.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\nexport default Filter;\n","import { RiContactsBook2Fill, RiContactsFill } from \"react-icons/ri\";\nimport Section from \"./components/Section/Section\";\nimport Container from \"./components/Container/Container\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\nimport { useSelector } from \"react-redux\";\nimport { getContacts } from \"redux/contacts/contactsSelectors\";\n\nconst App = () => {\n  const contacts = useSelector(getContacts);\n\n  return (\n    <>\n      <Section>\n        <Container>\n          <h1>\n            <RiContactsBook2Fill />\n            Phonebook\n          </h1>\n\n          <ContactForm />\n\n          {contacts.length > 0 && (\n            <>\n              <h2>\n                <RiContactsFill />\n                Contacts\n              </h2>\n\n              <Filter />\n\n              <ContactList />\n            </>\n          )}\n        </Container>\n      </Section>\n    </>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport Swal from \"sweetalert2\";\nimport contactsActions from \"./contactsActions\";\n// import types from \"./contactsTypes\";\n\n// const initialState = JSON.parse(localStorage.getItem(\"contacts\")) ?? [];\nconst initialState = [];\n\nconst checkContact = (contacts, name, number) => {\n  const includedName = contacts.find(\n    (contact) => contact.name.toLowerCase() === name.toLowerCase()\n  );\n\n  const includedNumber = contacts.find(\n    (contact) =>\n      contact.number.replace(/[^0-9]/g, \"\") === number.replace(/[^0-9]/g, \"\")\n  );\n\n  if (includedName) {\n    Swal.fire({\n      position: \"center\",\n      icon: \"error\",\n      title: `${name.toUpperCase()}\\nis already in contacts!`,\n      confirmButtonColor: \"indianred\",\n    });\n\n    return includedName;\n  }\n\n  if (includedNumber) {\n    Swal.fire({\n      position: \"center\",\n      icon: \"error\",\n      title: `This number is already in contacts as\\n${includedNumber.name.toUpperCase()}`,\n      confirmButtonColor: \"indianred\",\n    });\n    return includedNumber;\n  }\n};\n\nconst addContact = (state, { payload }) => {\n  const includedContact = checkContact(state, payload.name, payload.number);\n\n  if (includedContact) return state;\n\n  // localStorage.setItem(\"contacts\", JSON.stringify([...state, payload]));\n\n  return [...state, payload];\n};\n\nconst deleteContact = (state, { payload }) => {\n  const contacts = state.filter(({ id }) => {\n    return id !== payload;\n  });\n\n  // localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n\n  return contacts;\n};\n\nconst items = createReducer(initialState, {\n  [contactsActions.addContact]: addContact,\n  [contactsActions.deleteContact]: deleteContact,\n});\n\nconst filter = createReducer(\"\", {\n  [contactsActions.changeFilter]: (_, { payload }) => payload,\n});\n\n// const items = (state = initialState, { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       const includedContact = checkContact(state, payload.name, payload.number);\n\n//       if (includedContact) return state;\n\n//       localStorage.setItem(\"contacts\", JSON.stringify([...state, payload]));\n\n//       return [...state, payload];\n\n//     case types.DELETE:\n//       const contacts = state.filter(({ id }) => {\n//         return id !== payload;\n//       });\n\n//       localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n\n//       return contacts;\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = \"\", { type, payload }) => {\n//   switch (type) {\n//     case types.CHANGE_FILTER:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({ items, filter });\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\n// import { combineReducers } from \"redux\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport contactsReducer from \"./contacts/contactsReducer\";\n\n// import { combineReducers, createStore } from \"redux\";\n// import { composeWithDevTools } from \"redux-devtools-extension\";\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst contactsPersistConfig = {\n  key: \"contacts\",\n  storage,\n  blacklist: [\"filter\"],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nconst persistor = persistStore(store);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { store, persistor };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}